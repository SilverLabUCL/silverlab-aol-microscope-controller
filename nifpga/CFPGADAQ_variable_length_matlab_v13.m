classdef CFPGADAQ_variable_length_matlab_v13 < CNiFpgaBitfile
    %CFPGADAQ_variable_length_matlab_v13 Class to represent the NI Fpga VI FPGADAQ_variable_length_matlab_v13
    
    %######################!!! IMPORTANT !!!######################
    %THIS FILE HAS BEEN GENERATED BY NIFpga2Matlab.m, DO NOT EDIT!
    %######################!!! IMPORTANT !!!######################
    
    properties (SetAccess = immutable)
        FIFOREFHOSTFRAME % handle to NI Fpga fifo object FIFOREFHOSTFRAME
        Channel0 % handle to NI Fpga fifo object Channel0
        Channel1 % handle to NI Fpga fifo object Channel1
        VARIABLELENGTHFIFO % handle to NI Fpga fifo object VARIABLELENGTHFIFO
    end
    
    properties (Dependent = true)
        UserCommandIdle
        UserCommandStatus
        UserCommandCommit
        UserCommand
        Configured
        PLLLocked
        TXready
        UserError
        lostx
        lostxory
        losty
        lostz
        notlost_xory
        writerefframe
        num_xyref_pixels
        numxyzpixels
        pixel_count
        DataOut
        X_Y_Z
        CPHA
        CPOL
        Enable_ZMC
        MISO
        RESET
        enable_mc_recovery
        set_reference
        swapz
        use_host_offset_z
        use_vel_estimate
        usehostoffset
        useperiodicfunctional
        useslidingaverage
        write_first_centroid_z
        HCP1
        UserData1
        ref_diff_x_y
        ref_diff_z
        Average
        AverageZ
        Averageoffsets
        UserData0
        ref_framedilute
        threshold_xy
        capturezrefcentroid
        last_pixel
        lastpixel
        resetxyaccum
        resetzaccum
        skip_z
        x_cent_new_x10
        x_cent_ref_x10
        x_correction_X10
        x_diff_X100
        y_cent_new_x10
        y_cent_ref_x10
        y_correction_X10
        y_diff_X100
        z_cent_new_x10
        z_cent_ref_x10
        z_correction_X100
        z_diff_X100
        ABORTTrigloop
        EnableTrigger1
        EnableTrigger2
        EnableTrigger3
        EnableTrigger4
        Enablestimulusfunct
        Enablestimuluslive
        Experimentstart
        live_scantriggersmodule
        Integral_scale
        Integral_scale_z
        Trigger1function
        diff_thresh_x10
        diff_thresh_x10_z
        ignore_z_lines
        proportianal_x10
        proportianal_x10_z
        scan_int_x1000
        threshold_z
        PulseWidthfunct80MhzCycles2
        PulseWidthlive80MhzCycles
        PulsewidthticksFrameCycleTrig
        PulsewidthticksLineTrig
        PulsewidthticksStartofExptrig
        PulsewidthticksTrialtrig
        TriggerDelay80MhzCycles
        TriggerPeriod80MhzCycles
        AcquireMCBG
        abort_MC
        background_mc
        endoftrial
        flag1_read
        flag2_read
        rec_on_bg
        start_backref_pulse
        startpulseout
        AODfillin
        Enum
        aqstate
        bgsm_state
        nemrefypix
        xpixelscurrent
        ycount
        Newlinetriggerenabled
        Refcountresetenabled
        flag1_write
        flag2_write
        live_scan
        select_ref_red
        start
        stop_background
        use_varailble_length
        AODfill
        ImagingProtocol
        Mode
        Ref_z_lines
        RefsampsperpixPr
        Refsampsperpix_z
        RefxpixelsperlineNpxr
        RefypixelsperlineNpyr
        Trigger1selector
        mc_delayprog
        ref_z_pixels_per_line
        sampleswaitafterpulse
        sampleswaitaftertrigger
        sampsperpixP
        suppres_mc
        xpixelsperlineNpx
        ypixelsperlineNpy
        StartUpDelay
        NumberpixelspointingNp
        RefScanCycles
        RepeatNumberofCycles
    end
    
    methods
        function obj = CFPGADAQ_variable_length_matlab_v13(Target)
            bitName = fullfile(fileparts(mfilename('fullpath')), 'NiFpga_FPGADAQ_variable_length_matlab_v13.lvbitx');
            obj = obj@CNiFpgaBitfile(bitName, '2F89F0E5AF6D023C3F4D65EA377BA44C', Target);
            obj.FIFOREFHOSTFRAME = CTargetToHostFifo(uint32(1), uint32(504));
            obj.Channel0 = CTargetToHostFifo(uint32(3), uint32(506));
            obj.Channel1 = CTargetToHostFifo(uint32(2), uint32(506));
            obj.VARIABLELENGTHFIFO = CHostToTargetFifo(uint32(0), uint32(604));
        end
        
        function status = open(obj, attribute)
            status = open@CNiFpgaBitfile(obj, attribute);
            if ~status
                obj.FIFOREFHOSTFRAME.Session = obj.Session;
                obj.Channel0.Session = obj.Session;
                obj.Channel1.Session = obj.Session;
                obj.VARIABLELENGTHFIFO.Session = obj.Session;
            end
        end
        
        function status = close(obj)
            status = close@CNiFpgaBitfile(obj);
            if ~status
                obj.FIFOREFHOSTFRAME.Session = [];
                obj.Channel0.Session = [];
                obj.Channel1.Session = [];
                obj.VARIABLELENGTHFIFO.Session = [];
            end
        end
        
        function UserCommandIdle = get.UserCommandIdle(obj)
            if ~isempty(obj.Session)
                [obj.Status, UserCommandIdle] = NiFpga(uint32(100), obj.Session, uint32(10));
            else
                UserCommandIdle = NaN;
            end
        end
        function UserCommandStatus = get.UserCommandStatus(obj)
            if ~isempty(obj.Session)
                [obj.Status, UserCommandStatus] = NiFpga(uint32(102), obj.Session, uint32(14));
            else
                UserCommandStatus = NaN;
            end
        end
        function UserCommandCommit = get.UserCommandCommit(obj)
            if ~isempty(obj.Session)
                [obj.Status, UserCommandCommit] = NiFpga(uint32(100), obj.Session, uint32(2));
            else
                UserCommandCommit = NaN;
            end
        end
        function UserCommand = get.UserCommand(obj)
            if ~isempty(obj.Session)
                [obj.Status, UserCommand] = NiFpga(uint32(102), obj.Session, uint32(6));
            else
                UserCommand = NaN;
            end
        end
        function Configured = get.Configured(obj)
            if ~isempty(obj.Session)
                [obj.Status, Configured] = NiFpga(uint32(100), obj.Session, uint32(34));
            else
                Configured = NaN;
            end
        end
        function PLLLocked = get.PLLLocked(obj)
            if ~isempty(obj.Session)
                [obj.Status, PLLLocked] = NiFpga(uint32(100), obj.Session, uint32(26));
            else
                PLLLocked = NaN;
            end
        end
        function TXready = get.TXready(obj)
            if ~isempty(obj.Session)
                [obj.Status, TXready] = NiFpga(uint32(100), obj.Session, uint32(134));
            else
                TXready = NaN;
            end
        end
        function UserError = get.UserError(obj)
            if ~isempty(obj.Session)
                [obj.Status, UserError] = NiFpga(uint32(100), obj.Session, uint32(30));
            else
                UserError = NaN;
            end
        end
        function lostx = get.lostx(obj)
            if ~isempty(obj.Session)
                [obj.Status, lostx] = NiFpga(uint32(100), obj.Session, uint32(106));
            else
                lostx = NaN;
            end
        end
        function lostxory = get.lostxory(obj)
            if ~isempty(obj.Session)
                [obj.Status, lostxory] = NiFpga(uint32(100), obj.Session, uint32(86));
            else
                lostxory = NaN;
            end
        end
        function losty = get.losty(obj)
            if ~isempty(obj.Session)
                [obj.Status, losty] = NiFpga(uint32(100), obj.Session, uint32(102));
            else
                losty = NaN;
            end
        end
        function lostz = get.lostz(obj)
            if ~isempty(obj.Session)
                [obj.Status, lostz] = NiFpga(uint32(100), obj.Session, uint32(122));
            else
                lostz = NaN;
            end
        end
        function notlost_xory = get.notlost_xory(obj)
            if ~isempty(obj.Session)
                [obj.Status, notlost_xory] = NiFpga(uint32(100), obj.Session, uint32(90));
            else
                notlost_xory = NaN;
            end
        end
        function writerefframe = get.writerefframe(obj)
            if ~isempty(obj.Session)
                [obj.Status, writerefframe] = NiFpga(uint32(100), obj.Session, uint32(254));
            else
                writerefframe = NaN;
            end
        end
        function num_xyref_pixels = get.num_xyref_pixels(obj)
            if ~isempty(obj.Session)
                [obj.Status, num_xyref_pixels] = NiFpga(uint32(104), obj.Session, uint32(190));
            else
                num_xyref_pixels = NaN;
            end
        end
        function numxyzpixels = get.numxyzpixels(obj)
            if ~isempty(obj.Session)
                [obj.Status, numxyzpixels] = NiFpga(uint32(104), obj.Session, uint32(194));
            else
                numxyzpixels = NaN;
            end
        end
        function pixel_count = get.pixel_count(obj)
            if ~isempty(obj.Session)
                [obj.Status, pixel_count] = NiFpga(uint32(104), obj.Session, uint32(186));
            else
                pixel_count = NaN;
            end
        end
        function DataOut = get.DataOut(obj)
            if ~isempty(obj.Session)
                [obj.Status, DataOut] = NiFpga(uint32(108), obj.Session, uint32(56));
            else
                DataOut = NaN;
            end
        end
        function X_Y_Z = get.X_Y_Z(obj)
            if ~isempty(obj.Session)
                [obj.Status, X_Y_Z] = NiFpga(uint32(108), obj.Session, uint32(216));
            else
                X_Y_Z = NaN;
            end
        end
        function CPHA = get.CPHA(obj)
            if ~isempty(obj.Session)
                [obj.Status, CPHA] = NiFpga(uint32(100), obj.Session, uint32(46));
            else
                CPHA = NaN;
            end
        end
        function CPOL = get.CPOL(obj)
            if ~isempty(obj.Session)
                [obj.Status, CPOL] = NiFpga(uint32(100), obj.Session, uint32(50));
            else
                CPOL = NaN;
            end
        end
        function Enable_ZMC = get.Enable_ZMC(obj)
            if ~isempty(obj.Session)
                [obj.Status, Enable_ZMC] = NiFpga(uint32(100), obj.Session, uint32(214));
            else
                Enable_ZMC = NaN;
            end
        end
        function MISO = get.MISO(obj)
            if ~isempty(obj.Session)
                [obj.Status, MISO] = NiFpga(uint32(100), obj.Session, uint32(38));
            else
                MISO = NaN;
            end
        end
        function RESET = get.RESET(obj)
            if ~isempty(obj.Session)
                [obj.Status, RESET] = NiFpga(uint32(100), obj.Session, uint32(42));
            else
                RESET = NaN;
            end
        end
        function enable_mc_recovery = get.enable_mc_recovery(obj)
            if ~isempty(obj.Session)
                [obj.Status, enable_mc_recovery] = NiFpga(uint32(100), obj.Session, uint32(82));
            else
                enable_mc_recovery = NaN;
            end
        end
        function set_reference = get.set_reference(obj)
            if ~isempty(obj.Session)
                [obj.Status, set_reference] = NiFpga(uint32(100), obj.Session, uint32(142));
            else
                set_reference = NaN;
            end
        end
        function swapz = get.swapz(obj)
            if ~isempty(obj.Session)
                [obj.Status, swapz] = NiFpga(uint32(100), obj.Session, uint32(210));
            else
                swapz = NaN;
            end
        end
        function use_host_offset_z = get.use_host_offset_z(obj)
            if ~isempty(obj.Session)
                [obj.Status, use_host_offset_z] = NiFpga(uint32(100), obj.Session, uint32(222));
            else
                use_host_offset_z = NaN;
            end
        end
        function use_vel_estimate = get.use_vel_estimate(obj)
            if ~isempty(obj.Session)
                [obj.Status, use_vel_estimate] = NiFpga(uint32(100), obj.Session, uint32(70));
            else
                use_vel_estimate = NaN;
            end
        end
        function usehostoffset = get.usehostoffset(obj)
            if ~isempty(obj.Session)
                [obj.Status, usehostoffset] = NiFpga(uint32(100), obj.Session, uint32(138));
            else
                usehostoffset = NaN;
            end
        end
        function useperiodicfunctional = get.useperiodicfunctional(obj)
            if ~isempty(obj.Session)
                [obj.Status, useperiodicfunctional] = NiFpga(uint32(100), obj.Session, uint32(78));
            else
                useperiodicfunctional = NaN;
            end
        end
        function useslidingaverage = get.useslidingaverage(obj)
            if ~isempty(obj.Session)
                [obj.Status, useslidingaverage] = NiFpga(uint32(100), obj.Session, uint32(246));
            else
                useslidingaverage = NaN;
            end
        end
        function write_first_centroid_z = get.write_first_centroid_z(obj)
            if ~isempty(obj.Session)
                [obj.Status, write_first_centroid_z] = NiFpga(uint32(100), obj.Session, uint32(234));
            else
                write_first_centroid_z = NaN;
            end
        end
        function HCP1 = get.HCP1(obj)
            if ~isempty(obj.Session)
                [obj.Status, HCP1] = NiFpga(uint32(102), obj.Session, uint32(54));
            else
                HCP1 = NaN;
            end
        end
        function UserData1 = get.UserData1(obj)
            if ~isempty(obj.Session)
                [obj.Status, UserData1] = NiFpga(uint32(102), obj.Session, uint32(22));
            else
                UserData1 = NaN;
            end
        end
        function ref_diff_x_y = get.ref_diff_x_y(obj)
            if ~isempty(obj.Session)
                [obj.Status, ref_diff_x_y] = NiFpga(uint32(102), obj.Session, uint32(110));
            else
                ref_diff_x_y = NaN;
            end
        end
        function ref_diff_z = get.ref_diff_z(obj)
            if ~isempty(obj.Session)
                [obj.Status, ref_diff_z] = NiFpga(uint32(102), obj.Session, uint32(126));
            else
                ref_diff_z = NaN;
            end
        end
        function Average = get.Average(obj)
            if ~isempty(obj.Session)
                [obj.Status, Average] = NiFpga(uint32(104), obj.Session, uint32(154));
            else
                Average = NaN;
            end
        end
        function AverageZ = get.AverageZ(obj)
            if ~isempty(obj.Session)
                [obj.Status, AverageZ] = NiFpga(uint32(104), obj.Session, uint32(238));
            else
                AverageZ = NaN;
            end
        end
        function Averageoffsets = get.Averageoffsets(obj)
            if ~isempty(obj.Session)
                [obj.Status, Averageoffsets] = NiFpga(uint32(104), obj.Session, uint32(118));
            else
                Averageoffsets = NaN;
            end
        end
        function UserData0 = get.UserData0(obj)
            if ~isempty(obj.Session)
                [obj.Status, UserData0] = NiFpga(uint32(104), obj.Session, uint32(18));
            else
                UserData0 = NaN;
            end
        end
        function ref_framedilute = get.ref_framedilute(obj)
            if ~isempty(obj.Session)
                [obj.Status, ref_framedilute] = NiFpga(uint32(104), obj.Session, uint32(250));
            else
                ref_framedilute = NaN;
            end
        end
        function threshold_xy = get.threshold_xy(obj)
            if ~isempty(obj.Session)
                [obj.Status, threshold_xy] = NiFpga(uint32(104), obj.Session, uint32(130));
            else
                threshold_xy = NaN;
            end
        end
        function capturezrefcentroid = get.capturezrefcentroid(obj)
            if ~isempty(obj.Session)
                [obj.Status, capturezrefcentroid] = NiFpga(uint32(100), obj.Session, uint32(286));
            else
                capturezrefcentroid = NaN;
            end
        end
        function last_pixel = get.last_pixel(obj)
            if ~isempty(obj.Session)
                [obj.Status, last_pixel] = NiFpga(uint32(100), obj.Session, uint32(282));
            else
                last_pixel = NaN;
            end
        end
        function lastpixel = get.lastpixel(obj)
            if ~isempty(obj.Session)
                [obj.Status, lastpixel] = NiFpga(uint32(100), obj.Session, uint32(390));
            else
                lastpixel = NaN;
            end
        end
        function resetxyaccum = get.resetxyaccum(obj)
            if ~isempty(obj.Session)
                [obj.Status, resetxyaccum] = NiFpga(uint32(100), obj.Session, uint32(374));
            else
                resetxyaccum = NaN;
            end
        end
        function resetzaccum = get.resetzaccum(obj)
            if ~isempty(obj.Session)
                [obj.Status, resetzaccum] = NiFpga(uint32(100), obj.Session, uint32(370));
            else
                resetzaccum = NaN;
            end
        end
        function skip_z = get.skip_z(obj)
            if ~isempty(obj.Session)
                [obj.Status, skip_z] = NiFpga(uint32(100), obj.Session, uint32(386));
            else
                skip_z = NaN;
            end
        end
        function x_cent_new_x10 = get.x_cent_new_x10(obj)
            if ~isempty(obj.Session)
                [obj.Status, x_cent_new_x10] = NiFpga(uint32(103), obj.Session, uint32(306));
            else
                x_cent_new_x10 = NaN;
            end
        end
        function x_cent_ref_x10 = get.x_cent_ref_x10(obj)
            if ~isempty(obj.Session)
                [obj.Status, x_cent_ref_x10] = NiFpga(uint32(103), obj.Session, uint32(310));
            else
                x_cent_ref_x10 = NaN;
            end
        end
        function x_correction_X10 = get.x_correction_X10(obj)
            if ~isempty(obj.Session)
                [obj.Status, x_correction_X10] = NiFpga(uint32(103), obj.Session, uint32(338));
            else
                x_correction_X10 = NaN;
            end
        end
        function x_diff_X100 = get.x_diff_X100(obj)
            if ~isempty(obj.Session)
                [obj.Status, x_diff_X100] = NiFpga(uint32(103), obj.Session, uint32(314));
            else
                x_diff_X100 = NaN;
            end
        end
        function y_cent_new_x10 = get.y_cent_new_x10(obj)
            if ~isempty(obj.Session)
                [obj.Status, y_cent_new_x10] = NiFpga(uint32(103), obj.Session, uint32(298));
            else
                y_cent_new_x10 = NaN;
            end
        end
        function y_cent_ref_x10 = get.y_cent_ref_x10(obj)
            if ~isempty(obj.Session)
                [obj.Status, y_cent_ref_x10] = NiFpga(uint32(103), obj.Session, uint32(294));
            else
                y_cent_ref_x10 = NaN;
            end
        end
        function y_correction_X10 = get.y_correction_X10(obj)
            if ~isempty(obj.Session)
                [obj.Status, y_correction_X10] = NiFpga(uint32(103), obj.Session, uint32(334));
            else
                y_correction_X10 = NaN;
            end
        end
        function y_diff_X100 = get.y_diff_X100(obj)
            if ~isempty(obj.Session)
                [obj.Status, y_diff_X100] = NiFpga(uint32(103), obj.Session, uint32(302));
            else
                y_diff_X100 = NaN;
            end
        end
        function z_cent_new_x10 = get.z_cent_new_x10(obj)
            if ~isempty(obj.Session)
                [obj.Status, z_cent_new_x10] = NiFpga(uint32(103), obj.Session, uint32(322));
            else
                z_cent_new_x10 = NaN;
            end
        end
        function z_cent_ref_x10 = get.z_cent_ref_x10(obj)
            if ~isempty(obj.Session)
                [obj.Status, z_cent_ref_x10] = NiFpga(uint32(103), obj.Session, uint32(318));
            else
                z_cent_ref_x10 = NaN;
            end
        end
        function z_correction_X100 = get.z_correction_X100(obj)
            if ~isempty(obj.Session)
                [obj.Status, z_correction_X100] = NiFpga(uint32(103), obj.Session, uint32(330));
            else
                z_correction_X100 = NaN;
            end
        end
        function z_diff_X100 = get.z_diff_X100(obj)
            if ~isempty(obj.Session)
                [obj.Status, z_diff_X100] = NiFpga(uint32(103), obj.Session, uint32(326));
            else
                z_diff_X100 = NaN;
            end
        end
        function ABORTTrigloop = get.ABORTTrigloop(obj)
            if ~isempty(obj.Session)
                [obj.Status, ABORTTrigloop] = NiFpga(uint32(100), obj.Session, uint32(470));
            else
                ABORTTrigloop = NaN;
            end
        end
        function EnableTrigger1 = get.EnableTrigger1(obj)
            if ~isempty(obj.Session)
                [obj.Status, EnableTrigger1] = NiFpga(uint32(100), obj.Session, uint32(462));
            else
                EnableTrigger1 = NaN;
            end
        end
        function EnableTrigger2 = get.EnableTrigger2(obj)
            if ~isempty(obj.Session)
                [obj.Status, EnableTrigger2] = NiFpga(uint32(100), obj.Session, uint32(458));
            else
                EnableTrigger2 = NaN;
            end
        end
        function EnableTrigger3 = get.EnableTrigger3(obj)
            if ~isempty(obj.Session)
                [obj.Status, EnableTrigger3] = NiFpga(uint32(100), obj.Session, uint32(454));
            else
                EnableTrigger3 = NaN;
            end
        end
        function EnableTrigger4 = get.EnableTrigger4(obj)
            if ~isempty(obj.Session)
                [obj.Status, EnableTrigger4] = NiFpga(uint32(100), obj.Session, uint32(450));
            else
                EnableTrigger4 = NaN;
            end
        end
        function Enablestimulusfunct = get.Enablestimulusfunct(obj)
            if ~isempty(obj.Session)
                [obj.Status, Enablestimulusfunct] = NiFpga(uint32(100), obj.Session, uint32(422));
            else
                Enablestimulusfunct = NaN;
            end
        end
        function Enablestimuluslive = get.Enablestimuluslive(obj)
            if ~isempty(obj.Session)
                [obj.Status, Enablestimuluslive] = NiFpga(uint32(100), obj.Session, uint32(434));
            else
                Enablestimuluslive = NaN;
            end
        end
        function Experimentstart = get.Experimentstart(obj)
            if ~isempty(obj.Session)
                [obj.Status, Experimentstart] = NiFpga(uint32(100), obj.Session, uint32(474));
            else
                Experimentstart = NaN;
            end
        end
        function live_scantriggersmodule = get.live_scantriggersmodule(obj)
            if ~isempty(obj.Session)
                [obj.Status, live_scantriggersmodule] = NiFpga(uint32(100), obj.Session, uint32(466));
            else
                live_scantriggersmodule = NaN;
            end
        end
        function Integral_scale = get.Integral_scale(obj)
            if ~isempty(obj.Session)
                [obj.Status, Integral_scale] = NiFpga(uint32(104), obj.Session, uint32(358));
            else
                Integral_scale = NaN;
            end
        end
        function Integral_scale_z = get.Integral_scale_z(obj)
            if ~isempty(obj.Session)
                [obj.Status, Integral_scale_z] = NiFpga(uint32(104), obj.Session, uint32(342));
            else
                Integral_scale_z = NaN;
            end
        end
        function Trigger1function = get.Trigger1function(obj)
            if ~isempty(obj.Session)
                [obj.Status, Trigger1function] = NiFpga(uint32(104), obj.Session, uint32(414));
            else
                Trigger1function = NaN;
            end
        end
        function diff_thresh_x10 = get.diff_thresh_x10(obj)
            if ~isempty(obj.Session)
                [obj.Status, diff_thresh_x10] = NiFpga(uint32(104), obj.Session, uint32(366));
            else
                diff_thresh_x10 = NaN;
            end
        end
        function diff_thresh_x10_z = get.diff_thresh_x10_z(obj)
            if ~isempty(obj.Session)
                [obj.Status, diff_thresh_x10_z] = NiFpga(uint32(104), obj.Session, uint32(362));
            else
                diff_thresh_x10_z = NaN;
            end
        end
        function ignore_z_lines = get.ignore_z_lines(obj)
            if ~isempty(obj.Session)
                [obj.Status, ignore_z_lines] = NiFpga(uint32(104), obj.Session, uint32(382));
            else
                ignore_z_lines = NaN;
            end
        end
        function proportianal_x10 = get.proportianal_x10(obj)
            if ~isempty(obj.Session)
                [obj.Status, proportianal_x10] = NiFpga(uint32(104), obj.Session, uint32(354));
            else
                proportianal_x10 = NaN;
            end
        end
        function proportianal_x10_z = get.proportianal_x10_z(obj)
            if ~isempty(obj.Session)
                [obj.Status, proportianal_x10_z] = NiFpga(uint32(104), obj.Session, uint32(350));
            else
                proportianal_x10_z = NaN;
            end
        end
        function scan_int_x1000 = get.scan_int_x1000(obj)
            if ~isempty(obj.Session)
                [obj.Status, scan_int_x1000] = NiFpga(uint32(104), obj.Session, uint32(346));
            else
                scan_int_x1000 = NaN;
            end
        end
        function threshold_z = get.threshold_z(obj)
            if ~isempty(obj.Session)
                [obj.Status, threshold_z] = NiFpga(uint32(104), obj.Session, uint32(378));
            else
                threshold_z = NaN;
            end
        end
        function PulseWidthfunct80MhzCycles2 = get.PulseWidthfunct80MhzCycles2(obj)
            if ~isempty(obj.Session)
                [obj.Status, PulseWidthfunct80MhzCycles2] = NiFpga(uint32(106), obj.Session, uint32(424));
            else
                PulseWidthfunct80MhzCycles2 = NaN;
            end
        end
        function PulseWidthlive80MhzCycles = get.PulseWidthlive80MhzCycles(obj)
            if ~isempty(obj.Session)
                [obj.Status, PulseWidthlive80MhzCycles] = NiFpga(uint32(106), obj.Session, uint32(436));
            else
                PulseWidthlive80MhzCycles = NaN;
            end
        end
        function PulsewidthticksFrameCycleTrig = get.PulsewidthticksFrameCycleTrig(obj)
            if ~isempty(obj.Session)
                [obj.Status, PulsewidthticksFrameCycleTrig] = NiFpga(uint32(106), obj.Session, uint32(404));
            else
                PulsewidthticksFrameCycleTrig = NaN;
            end
        end
        function PulsewidthticksLineTrig = get.PulsewidthticksLineTrig(obj)
            if ~isempty(obj.Session)
                [obj.Status, PulsewidthticksLineTrig] = NiFpga(uint32(106), obj.Session, uint32(408));
            else
                PulsewidthticksLineTrig = NaN;
            end
        end
        function PulsewidthticksStartofExptrig = get.PulsewidthticksStartofExptrig(obj)
            if ~isempty(obj.Session)
                [obj.Status, PulsewidthticksStartofExptrig] = NiFpga(uint32(106), obj.Session, uint32(396));
            else
                PulsewidthticksStartofExptrig = NaN;
            end
        end
        function PulsewidthticksTrialtrig = get.PulsewidthticksTrialtrig(obj)
            if ~isempty(obj.Session)
                [obj.Status, PulsewidthticksTrialtrig] = NiFpga(uint32(106), obj.Session, uint32(400));
            else
                PulsewidthticksTrialtrig = NaN;
            end
        end
        function TriggerDelay80MhzCycles = get.TriggerDelay80MhzCycles(obj)
            if ~isempty(obj.Session)
                [obj.Status, TriggerDelay80MhzCycles] = NiFpga(uint32(106), obj.Session, uint32(428));
            else
                TriggerDelay80MhzCycles = NaN;
            end
        end
        function TriggerPeriod80MhzCycles = get.TriggerPeriod80MhzCycles(obj)
            if ~isempty(obj.Session)
                [obj.Status, TriggerPeriod80MhzCycles] = NiFpga(uint32(106), obj.Session, uint32(440));
            else
                TriggerPeriod80MhzCycles = NaN;
            end
        end
        function AcquireMCBG = get.AcquireMCBG(obj)
            if ~isempty(obj.Session)
                [obj.Status, AcquireMCBG] = NiFpga(uint32(100), obj.Session, uint32(2147484202));
            else
                AcquireMCBG = NaN;
            end
        end
        function abort_MC = get.abort_MC(obj)
            if ~isempty(obj.Session)
                [obj.Status, abort_MC] = NiFpga(uint32(100), obj.Session, uint32(2147484138));
            else
                abort_MC = NaN;
            end
        end
        function background_mc = get.background_mc(obj)
            if ~isempty(obj.Session)
                [obj.Status, background_mc] = NiFpga(uint32(100), obj.Session, uint32(2147484178));
            else
                background_mc = NaN;
            end
        end
        function endoftrial = get.endoftrial(obj)
            if ~isempty(obj.Session)
                [obj.Status, endoftrial] = NiFpga(uint32(100), obj.Session, uint32(2147484186));
            else
                endoftrial = NaN;
            end
        end
        function flag1_read = get.flag1_read(obj)
            if ~isempty(obj.Session)
                [obj.Status, flag1_read] = NiFpga(uint32(100), obj.Session, uint32(2147484162));
            else
                flag1_read = NaN;
            end
        end
        function flag2_read = get.flag2_read(obj)
            if ~isempty(obj.Session)
                [obj.Status, flag2_read] = NiFpga(uint32(100), obj.Session, uint32(2147484154));
            else
                flag2_read = NaN;
            end
        end
        function rec_on_bg = get.rec_on_bg(obj)
            if ~isempty(obj.Session)
                [obj.Status, rec_on_bg] = NiFpga(uint32(100), obj.Session, uint32(2147484206));
            else
                rec_on_bg = NaN;
            end
        end
        function start_backref_pulse = get.start_backref_pulse(obj)
            if ~isempty(obj.Session)
                [obj.Status, start_backref_pulse] = NiFpga(uint32(100), obj.Session, uint32(2147484214));
            else
                start_backref_pulse = NaN;
            end
        end
        function startpulseout = get.startpulseout(obj)
            if ~isempty(obj.Session)
                [obj.Status, startpulseout] = NiFpga(uint32(100), obj.Session, uint32(2147484170));
            else
                startpulseout = NaN;
            end
        end
        function AODfillin = get.AODfillin(obj)
            if ~isempty(obj.Session)
                [obj.Status, AODfillin] = NiFpga(uint32(104), obj.Session, uint32(2147484190));
            else
                AODfillin = NaN;
            end
        end
        function Enum = get.Enum(obj)
            if ~isempty(obj.Session)
                [obj.Status, Enum] = NiFpga(uint32(104), obj.Session, uint32(2147484150));
            else
                Enum = NaN;
            end
        end
        function aqstate = get.aqstate(obj)
            if ~isempty(obj.Session)
                [obj.Status, aqstate] = NiFpga(uint32(104), obj.Session, uint32(2147484210));
            else
                aqstate = NaN;
            end
        end
        function bgsm_state = get.bgsm_state(obj)
            if ~isempty(obj.Session)
                [obj.Status, bgsm_state] = NiFpga(uint32(104), obj.Session, uint32(2147484182));
            else
                bgsm_state = NaN;
            end
        end
        function nemrefypix = get.nemrefypix(obj)
            if ~isempty(obj.Session)
                [obj.Status, nemrefypix] = NiFpga(uint32(104), obj.Session, uint32(2147484194));
            else
                nemrefypix = NaN;
            end
        end
        function xpixelscurrent = get.xpixelscurrent(obj)
            if ~isempty(obj.Session)
                [obj.Status, xpixelscurrent] = NiFpga(uint32(104), obj.Session, uint32(2147484130));
            else
                xpixelscurrent = NaN;
            end
        end
        function ycount = get.ycount(obj)
            if ~isempty(obj.Session)
                [obj.Status, ycount] = NiFpga(uint32(104), obj.Session, uint32(2147484134));
            else
                ycount = NaN;
            end
        end
        function Newlinetriggerenabled = get.Newlinetriggerenabled(obj)
            if ~isempty(obj.Session)
                [obj.Status, Newlinetriggerenabled] = NiFpga(uint32(100), obj.Session, uint32(2147484250));
            else
                Newlinetriggerenabled = NaN;
            end
        end
        function Refcountresetenabled = get.Refcountresetenabled(obj)
            if ~isempty(obj.Session)
                [obj.Status, Refcountresetenabled] = NiFpga(uint32(100), obj.Session, uint32(2147484254));
            else
                Refcountresetenabled = NaN;
            end
        end
        function flag1_write = get.flag1_write(obj)
            if ~isempty(obj.Session)
                [obj.Status, flag1_write] = NiFpga(uint32(100), obj.Session, uint32(2147484166));
            else
                flag1_write = NaN;
            end
        end
        function flag2_write = get.flag2_write(obj)
            if ~isempty(obj.Session)
                [obj.Status, flag2_write] = NiFpga(uint32(100), obj.Session, uint32(2147484158));
            else
                flag2_write = NaN;
            end
        end
        function live_scan = get.live_scan(obj)
            if ~isempty(obj.Session)
                [obj.Status, live_scan] = NiFpga(uint32(100), obj.Session, uint32(2147484262));
            else
                live_scan = NaN;
            end
        end
        function select_ref_red = get.select_ref_red(obj)
            if ~isempty(obj.Session)
                [obj.Status, select_ref_red] = NiFpga(uint32(100), obj.Session, uint32(2147484258));
            else
                select_ref_red = NaN;
            end
        end
        function start = get.start(obj)
            if ~isempty(obj.Session)
                [obj.Status, start] = NiFpga(uint32(100), obj.Session, uint32(2147484266));
            else
                start = NaN;
            end
        end
        function stop_background = get.stop_background(obj)
            if ~isempty(obj.Session)
                [obj.Status, stop_background] = NiFpga(uint32(100), obj.Session, uint32(2147484174));
            else
                stop_background = NaN;
            end
        end
        function use_varailble_length = get.use_varailble_length(obj)
            if ~isempty(obj.Session)
                [obj.Status, use_varailble_length] = NiFpga(uint32(100), obj.Session, uint32(2147484146));
            else
                use_varailble_length = NaN;
            end
        end
        function AODfill = get.AODfill(obj)
            if ~isempty(obj.Session)
                [obj.Status, AODfill] = NiFpga(uint32(104), obj.Session, uint32(2147484274));
            else
                AODfill = NaN;
            end
        end
        function ImagingProtocol = get.ImagingProtocol(obj)
            if ~isempty(obj.Session)
                [obj.Status, ImagingProtocol] = NiFpga(uint32(104), obj.Session, uint32(2147484246));
            else
                ImagingProtocol = NaN;
            end
        end
        function Mode = get.Mode(obj)
            if ~isempty(obj.Session)
                [obj.Status, Mode] = NiFpga(uint32(104), obj.Session, uint32(2147484126));
            else
                Mode = NaN;
            end
        end
        function Ref_z_lines = get.Ref_z_lines(obj)
            if ~isempty(obj.Session)
                [obj.Status, Ref_z_lines] = NiFpga(uint32(104), obj.Session, uint32(2147484222));
            else
                Ref_z_lines = NaN;
            end
        end
        function RefsampsperpixPr = get.RefsampsperpixPr(obj)
            if ~isempty(obj.Session)
                [obj.Status, RefsampsperpixPr] = NiFpga(uint32(104), obj.Session, uint32(2147484234));
            else
                RefsampsperpixPr = NaN;
            end
        end
        function Refsampsperpix_z = get.Refsampsperpix_z(obj)
            if ~isempty(obj.Session)
                [obj.Status, Refsampsperpix_z] = NiFpga(uint32(104), obj.Session, uint32(2147484230));
            else
                Refsampsperpix_z = NaN;
            end
        end
        function RefxpixelsperlineNpxr = get.RefxpixelsperlineNpxr(obj)
            if ~isempty(obj.Session)
                [obj.Status, RefxpixelsperlineNpxr] = NiFpga(uint32(104), obj.Session, uint32(2147484294));
            else
                RefxpixelsperlineNpxr = NaN;
            end
        end
        function RefypixelsperlineNpyr = get.RefypixelsperlineNpyr(obj)
            if ~isempty(obj.Session)
                [obj.Status, RefypixelsperlineNpyr] = NiFpga(uint32(104), obj.Session, uint32(2147484290));
            else
                RefypixelsperlineNpyr = NaN;
            end
        end
        function Trigger1selector = get.Trigger1selector(obj)
            if ~isempty(obj.Session)
                [obj.Status, Trigger1selector] = NiFpga(uint32(104), obj.Session, uint32(2147484242));
            else
                Trigger1selector = NaN;
            end
        end
        function mc_delayprog = get.mc_delayprog(obj)
            if ~isempty(obj.Session)
                [obj.Status, mc_delayprog] = NiFpga(uint32(104), obj.Session, uint32(2147484218));
            else
                mc_delayprog = NaN;
            end
        end
        function ref_z_pixels_per_line = get.ref_z_pixels_per_line(obj)
            if ~isempty(obj.Session)
                [obj.Status, ref_z_pixels_per_line] = NiFpga(uint32(104), obj.Session, uint32(2147484226));
            else
                ref_z_pixels_per_line = NaN;
            end
        end
        function sampleswaitafterpulse = get.sampleswaitafterpulse(obj)
            if ~isempty(obj.Session)
                [obj.Status, sampleswaitafterpulse] = NiFpga(uint32(104), obj.Session, uint32(2147484198));
            else
                sampleswaitafterpulse = NaN;
            end
        end
        function sampleswaitaftertrigger = get.sampleswaitaftertrigger(obj)
            if ~isempty(obj.Session)
                [obj.Status, sampleswaitaftertrigger] = NiFpga(uint32(104), obj.Session, uint32(2147484306));
            else
                sampleswaitaftertrigger = NaN;
            end
        end
        function sampsperpixP = get.sampsperpixP(obj)
            if ~isempty(obj.Session)
                [obj.Status, sampsperpixP] = NiFpga(uint32(104), obj.Session, uint32(2147484238));
            else
                sampsperpixP = NaN;
            end
        end
        function suppres_mc = get.suppres_mc(obj)
            if ~isempty(obj.Session)
                [obj.Status, suppres_mc] = NiFpga(uint32(104), obj.Session, uint32(2147484142));
            else
                suppres_mc = NaN;
            end
        end
        function xpixelsperlineNpx = get.xpixelsperlineNpx(obj)
            if ~isempty(obj.Session)
                [obj.Status, xpixelsperlineNpx] = NiFpga(uint32(104), obj.Session, uint32(2147484302));
            else
                xpixelsperlineNpx = NaN;
            end
        end
        function ypixelsperlineNpy = get.ypixelsperlineNpy(obj)
            if ~isempty(obj.Session)
                [obj.Status, ypixelsperlineNpy] = NiFpga(uint32(104), obj.Session, uint32(2147484298));
            else
                ypixelsperlineNpy = NaN;
            end
        end
        function StartUpDelay = get.StartUpDelay(obj)
            if ~isempty(obj.Session)
                [obj.Status, StartUpDelay] = NiFpga(uint32(105), obj.Session, uint32(2147484280));
            else
                StartUpDelay = NaN;
            end
        end
        function NumberpixelspointingNp = get.NumberpixelspointingNp(obj)
            if ~isempty(obj.Session)
                [obj.Status, NumberpixelspointingNp] = NiFpga(uint32(106), obj.Session, uint32(2147484284));
            else
                NumberpixelspointingNp = NaN;
            end
        end
        function RefScanCycles = get.RefScanCycles(obj)
            if ~isempty(obj.Session)
                [obj.Status, RefScanCycles] = NiFpga(uint32(106), obj.Session, uint32(2147484276));
            else
                RefScanCycles = NaN;
            end
        end
        function RepeatNumberofCycles = get.RepeatNumberofCycles(obj)
            if ~isempty(obj.Session)
                [obj.Status, RepeatNumberofCycles] = NiFpga(uint32(106), obj.Session, uint32(2147484268));
            else
                RepeatNumberofCycles = NaN;
            end
        end
        
        function set.UserCommandIdle(obj, UserCommandIdle)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(10), uint8(UserCommandIdle));
            end
        end
        function set.UserCommandStatus(obj, UserCommandStatus)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(202), obj.Session, uint32(14), uint8(UserCommandStatus));
            end
        end
        function set.UserCommandCommit(obj, UserCommandCommit)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(2), uint8(UserCommandCommit));
            end
        end
        function set.UserCommand(obj, UserCommand)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(202), obj.Session, uint32(6), uint8(UserCommand));
            end
        end
        function set.Configured(obj, Configured)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(34), uint8(Configured));
            end
        end
        function set.PLLLocked(obj, PLLLocked)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(26), uint8(PLLLocked));
            end
        end
        function set.TXready(obj, TXready)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(134), uint8(TXready));
            end
        end
        function set.UserError(obj, UserError)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(30), uint8(UserError));
            end
        end
        function set.lostx(obj, lostx)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(106), uint8(lostx));
            end
        end
        function set.lostxory(obj, lostxory)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(86), uint8(lostxory));
            end
        end
        function set.losty(obj, losty)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(102), uint8(losty));
            end
        end
        function set.lostz(obj, lostz)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(122), uint8(lostz));
            end
        end
        function set.notlost_xory(obj, notlost_xory)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(90), uint8(notlost_xory));
            end
        end
        function set.writerefframe(obj, writerefframe)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(254), uint8(writerefframe));
            end
        end
        function set.num_xyref_pixels(obj, num_xyref_pixels)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(204), obj.Session, uint32(190), uint16(num_xyref_pixels));
            end
        end
        function set.numxyzpixels(obj, numxyzpixels)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(204), obj.Session, uint32(194), uint16(numxyzpixels));
            end
        end
        function set.pixel_count(obj, pixel_count)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(204), obj.Session, uint32(186), uint16(pixel_count));
            end
        end
        function set.DataOut(obj, DataOut)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(208), obj.Session, uint32(56), uint64(DataOut));
            end
        end
        function set.X_Y_Z(obj, X_Y_Z)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(208), obj.Session, uint32(216), uint64(X_Y_Z));
            end
        end
        function set.CPHA(obj, CPHA)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(46), uint8(CPHA));
            end
        end
        function set.CPOL(obj, CPOL)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(50), uint8(CPOL));
            end
        end
        function set.Enable_ZMC(obj, Enable_ZMC)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(214), uint8(Enable_ZMC));
            end
        end
        function set.MISO(obj, MISO)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(38), uint8(MISO));
            end
        end
        function set.RESET(obj, RESET)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(42), uint8(RESET));
            end
        end
        function set.enable_mc_recovery(obj, enable_mc_recovery)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(82), uint8(enable_mc_recovery));
            end
        end
        function set.set_reference(obj, set_reference)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(142), uint8(set_reference));
            end
        end
        function set.swapz(obj, swapz)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(210), uint8(swapz));
            end
        end
        function set.use_host_offset_z(obj, use_host_offset_z)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(222), uint8(use_host_offset_z));
            end
        end
        function set.use_vel_estimate(obj, use_vel_estimate)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(70), uint8(use_vel_estimate));
            end
        end
        function set.usehostoffset(obj, usehostoffset)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(138), uint8(usehostoffset));
            end
        end
        function set.useperiodicfunctional(obj, useperiodicfunctional)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(78), uint8(useperiodicfunctional));
            end
        end
        function set.useslidingaverage(obj, useslidingaverage)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(246), uint8(useslidingaverage));
            end
        end
        function set.write_first_centroid_z(obj, write_first_centroid_z)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(234), uint8(write_first_centroid_z));
            end
        end
        function set.HCP1(obj, HCP1)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(202), obj.Session, uint32(54), uint8(HCP1));
            end
        end
        function set.UserData1(obj, UserData1)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(202), obj.Session, uint32(22), uint8(UserData1));
            end
        end
        function set.ref_diff_x_y(obj, ref_diff_x_y)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(202), obj.Session, uint32(110), uint8(ref_diff_x_y));
            end
        end
        function set.ref_diff_z(obj, ref_diff_z)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(202), obj.Session, uint32(126), uint8(ref_diff_z));
            end
        end
        function set.Average(obj, Average)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(204), obj.Session, uint32(154), uint16(Average));
            end
        end
        function set.AverageZ(obj, AverageZ)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(204), obj.Session, uint32(238), uint16(AverageZ));
            end
        end
        function set.Averageoffsets(obj, Averageoffsets)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(204), obj.Session, uint32(118), uint16(Averageoffsets));
            end
        end
        function set.UserData0(obj, UserData0)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(204), obj.Session, uint32(18), uint16(UserData0));
            end
        end
        function set.ref_framedilute(obj, ref_framedilute)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(204), obj.Session, uint32(250), uint16(ref_framedilute));
            end
        end
        function set.threshold_xy(obj, threshold_xy)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(204), obj.Session, uint32(130), uint16(threshold_xy));
            end
        end
        function set.capturezrefcentroid(obj, capturezrefcentroid)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(286), uint8(capturezrefcentroid));
            end
        end
        function set.last_pixel(obj, last_pixel)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(282), uint8(last_pixel));
            end
        end
        function set.lastpixel(obj, lastpixel)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(390), uint8(lastpixel));
            end
        end
        function set.resetxyaccum(obj, resetxyaccum)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(374), uint8(resetxyaccum));
            end
        end
        function set.resetzaccum(obj, resetzaccum)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(370), uint8(resetzaccum));
            end
        end
        function set.skip_z(obj, skip_z)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(386), uint8(skip_z));
            end
        end
        function set.x_cent_new_x10(obj, x_cent_new_x10)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(203), obj.Session, uint32(306), int16(x_cent_new_x10));
            end
        end
        function set.x_cent_ref_x10(obj, x_cent_ref_x10)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(203), obj.Session, uint32(310), int16(x_cent_ref_x10));
            end
        end
        function set.x_correction_X10(obj, x_correction_X10)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(203), obj.Session, uint32(338), int16(x_correction_X10));
            end
        end
        function set.x_diff_X100(obj, x_diff_X100)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(203), obj.Session, uint32(314), int16(x_diff_X100));
            end
        end
        function set.y_cent_new_x10(obj, y_cent_new_x10)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(203), obj.Session, uint32(298), int16(y_cent_new_x10));
            end
        end
        function set.y_cent_ref_x10(obj, y_cent_ref_x10)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(203), obj.Session, uint32(294), int16(y_cent_ref_x10));
            end
        end
        function set.y_correction_X10(obj, y_correction_X10)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(203), obj.Session, uint32(334), int16(y_correction_X10));
            end
        end
        function set.y_diff_X100(obj, y_diff_X100)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(203), obj.Session, uint32(302), int16(y_diff_X100));
            end
        end
        function set.z_cent_new_x10(obj, z_cent_new_x10)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(203), obj.Session, uint32(322), int16(z_cent_new_x10));
            end
        end
        function set.z_cent_ref_x10(obj, z_cent_ref_x10)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(203), obj.Session, uint32(318), int16(z_cent_ref_x10));
            end
        end
        function set.z_correction_X100(obj, z_correction_X100)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(203), obj.Session, uint32(330), int16(z_correction_X100));
            end
        end
        function set.z_diff_X100(obj, z_diff_X100)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(203), obj.Session, uint32(326), int16(z_diff_X100));
            end
        end
        function set.ABORTTrigloop(obj, ABORTTrigloop)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(470), uint8(ABORTTrigloop));
            end
        end
        function set.EnableTrigger1(obj, EnableTrigger1)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(462), uint8(EnableTrigger1));
            end
        end
        function set.EnableTrigger2(obj, EnableTrigger2)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(458), uint8(EnableTrigger2));
            end
        end
        function set.EnableTrigger3(obj, EnableTrigger3)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(454), uint8(EnableTrigger3));
            end
        end
        function set.EnableTrigger4(obj, EnableTrigger4)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(450), uint8(EnableTrigger4));
            end
        end
        function set.Enablestimulusfunct(obj, Enablestimulusfunct)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(422), uint8(Enablestimulusfunct));
            end
        end
        function set.Enablestimuluslive(obj, Enablestimuluslive)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(434), uint8(Enablestimuluslive));
            end
        end
        function set.Experimentstart(obj, Experimentstart)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(474), uint8(Experimentstart));
            end
        end
        function set.live_scantriggersmodule(obj, live_scantriggersmodule)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(466), uint8(live_scantriggersmodule));
            end
        end
        function set.Integral_scale(obj, Integral_scale)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(204), obj.Session, uint32(358), uint16(Integral_scale));
            end
        end
        function set.Integral_scale_z(obj, Integral_scale_z)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(204), obj.Session, uint32(342), uint16(Integral_scale_z));
            end
        end
        function set.Trigger1function(obj, Trigger1function)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(204), obj.Session, uint32(414), uint16(Trigger1function));
            end
        end
        function set.diff_thresh_x10(obj, diff_thresh_x10)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(204), obj.Session, uint32(366), uint16(diff_thresh_x10));
            end
        end
        function set.diff_thresh_x10_z(obj, diff_thresh_x10_z)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(204), obj.Session, uint32(362), uint16(diff_thresh_x10_z));
            end
        end
        function set.ignore_z_lines(obj, ignore_z_lines)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(204), obj.Session, uint32(382), uint16(ignore_z_lines));
            end
        end
        function set.proportianal_x10(obj, proportianal_x10)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(204), obj.Session, uint32(354), uint16(proportianal_x10));
            end
        end
        function set.proportianal_x10_z(obj, proportianal_x10_z)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(204), obj.Session, uint32(350), uint16(proportianal_x10_z));
            end
        end
        function set.scan_int_x1000(obj, scan_int_x1000)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(204), obj.Session, uint32(346), uint16(scan_int_x1000));
            end
        end
        function set.threshold_z(obj, threshold_z)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(204), obj.Session, uint32(378), uint16(threshold_z));
            end
        end
        function set.PulseWidthfunct80MhzCycles2(obj, PulseWidthfunct80MhzCycles2)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(206), obj.Session, uint32(424), uint32(PulseWidthfunct80MhzCycles2));
            end
        end
        function set.PulseWidthlive80MhzCycles(obj, PulseWidthlive80MhzCycles)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(206), obj.Session, uint32(436), uint32(PulseWidthlive80MhzCycles));
            end
        end
        function set.PulsewidthticksFrameCycleTrig(obj, PulsewidthticksFrameCycleTrig)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(206), obj.Session, uint32(404), uint32(PulsewidthticksFrameCycleTrig));
            end
        end
        function set.PulsewidthticksLineTrig(obj, PulsewidthticksLineTrig)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(206), obj.Session, uint32(408), uint32(PulsewidthticksLineTrig));
            end
        end
        function set.PulsewidthticksStartofExptrig(obj, PulsewidthticksStartofExptrig)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(206), obj.Session, uint32(396), uint32(PulsewidthticksStartofExptrig));
            end
        end
        function set.PulsewidthticksTrialtrig(obj, PulsewidthticksTrialtrig)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(206), obj.Session, uint32(400), uint32(PulsewidthticksTrialtrig));
            end
        end
        function set.TriggerDelay80MhzCycles(obj, TriggerDelay80MhzCycles)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(206), obj.Session, uint32(428), uint32(TriggerDelay80MhzCycles));
            end
        end
        function set.TriggerPeriod80MhzCycles(obj, TriggerPeriod80MhzCycles)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(206), obj.Session, uint32(440), uint32(TriggerPeriod80MhzCycles));
            end
        end
        function set.AcquireMCBG(obj, AcquireMCBG)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(2147484202), uint8(AcquireMCBG));
            end
        end
        function set.abort_MC(obj, abort_MC)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(2147484138), uint8(abort_MC));
            end
        end
        function set.background_mc(obj, background_mc)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(2147484178), uint8(background_mc));
            end
        end
        function set.endoftrial(obj, endoftrial)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(2147484186), uint8(endoftrial));
            end
        end
        function set.flag1_read(obj, flag1_read)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(2147484162), uint8(flag1_read));
            end
        end
        function set.flag2_read(obj, flag2_read)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(2147484154), uint8(flag2_read));
            end
        end
        function set.rec_on_bg(obj, rec_on_bg)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(2147484206), uint8(rec_on_bg));
            end
        end
        function set.start_backref_pulse(obj, start_backref_pulse)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(2147484214), uint8(start_backref_pulse));
            end
        end
        function set.startpulseout(obj, startpulseout)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(2147484170), uint8(startpulseout));
            end
        end
        function set.AODfillin(obj, AODfillin)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(204), obj.Session, uint32(2147484190), uint16(AODfillin));
            end
        end
        function set.Enum(obj, Enum)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(204), obj.Session, uint32(2147484150), uint16(Enum));
            end
        end
        function set.aqstate(obj, aqstate)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(204), obj.Session, uint32(2147484210), uint16(aqstate));
            end
        end
        function set.bgsm_state(obj, bgsm_state)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(204), obj.Session, uint32(2147484182), uint16(bgsm_state));
            end
        end
        function set.nemrefypix(obj, nemrefypix)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(204), obj.Session, uint32(2147484194), uint16(nemrefypix));
            end
        end
        function set.xpixelscurrent(obj, xpixelscurrent)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(204), obj.Session, uint32(2147484130), uint16(xpixelscurrent));
            end
        end
        function set.ycount(obj, ycount)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(204), obj.Session, uint32(2147484134), uint16(ycount));
            end
        end
        function set.Newlinetriggerenabled(obj, Newlinetriggerenabled)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(2147484250), uint8(Newlinetriggerenabled));
            end
        end
        function set.Refcountresetenabled(obj, Refcountresetenabled)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(2147484254), uint8(Refcountresetenabled));
            end
        end
        function set.flag1_write(obj, flag1_write)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(2147484166), uint8(flag1_write));
            end
        end
        function set.flag2_write(obj, flag2_write)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(2147484158), uint8(flag2_write));
            end
        end
        function set.live_scan(obj, live_scan)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(2147484262), uint8(live_scan));
            end
        end
        function set.select_ref_red(obj, select_ref_red)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(2147484258), uint8(select_ref_red));
            end
        end
        function set.start(obj, start)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(2147484266), uint8(start));
            end
        end
        function set.stop_background(obj, stop_background)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(2147484174), uint8(stop_background));
            end
        end
        function set.use_varailble_length(obj, use_varailble_length)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(200), obj.Session, uint32(2147484146), uint8(use_varailble_length));
            end
        end
        function set.AODfill(obj, AODfill)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(204), obj.Session, uint32(2147484274), uint16(AODfill));
            end
        end
        function set.ImagingProtocol(obj, ImagingProtocol)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(204), obj.Session, uint32(2147484246), uint16(ImagingProtocol));
            end
        end
        function set.Mode(obj, Mode)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(204), obj.Session, uint32(2147484126), uint16(Mode));
            end
        end
        function set.Ref_z_lines(obj, Ref_z_lines)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(204), obj.Session, uint32(2147484222), uint16(Ref_z_lines));
            end
        end
        function set.RefsampsperpixPr(obj, RefsampsperpixPr)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(204), obj.Session, uint32(2147484234), uint16(RefsampsperpixPr));
            end
        end
        function set.Refsampsperpix_z(obj, Refsampsperpix_z)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(204), obj.Session, uint32(2147484230), uint16(Refsampsperpix_z));
            end
        end
        function set.RefxpixelsperlineNpxr(obj, RefxpixelsperlineNpxr)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(204), obj.Session, uint32(2147484294), uint16(RefxpixelsperlineNpxr));
            end
        end
        function set.RefypixelsperlineNpyr(obj, RefypixelsperlineNpyr)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(204), obj.Session, uint32(2147484290), uint16(RefypixelsperlineNpyr));
            end
        end
        function set.Trigger1selector(obj, Trigger1selector)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(204), obj.Session, uint32(2147484242), uint16(Trigger1selector));
            end
        end
        function set.mc_delayprog(obj, mc_delayprog)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(204), obj.Session, uint32(2147484218), uint16(mc_delayprog));
            end
        end
        function set.ref_z_pixels_per_line(obj, ref_z_pixels_per_line)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(204), obj.Session, uint32(2147484226), uint16(ref_z_pixels_per_line));
            end
        end
        function set.sampleswaitafterpulse(obj, sampleswaitafterpulse)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(204), obj.Session, uint32(2147484198), uint16(sampleswaitafterpulse));
            end
        end
        function set.sampleswaitaftertrigger(obj, sampleswaitaftertrigger)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(204), obj.Session, uint32(2147484306), uint16(sampleswaitaftertrigger));
            end
        end
        function set.sampsperpixP(obj, sampsperpixP)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(204), obj.Session, uint32(2147484238), uint16(sampsperpixP));
            end
        end
        function set.suppres_mc(obj, suppres_mc)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(204), obj.Session, uint32(2147484142), uint16(suppres_mc));
            end
        end
        function set.xpixelsperlineNpx(obj, xpixelsperlineNpx)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(204), obj.Session, uint32(2147484302), uint16(xpixelsperlineNpx));
            end
        end
        function set.ypixelsperlineNpy(obj, ypixelsperlineNpy)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(204), obj.Session, uint32(2147484298), uint16(ypixelsperlineNpy));
            end
        end
        function set.StartUpDelay(obj, StartUpDelay)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(205), obj.Session, uint32(2147484280), int32(StartUpDelay));
            end
        end
        function set.NumberpixelspointingNp(obj, NumberpixelspointingNp)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(206), obj.Session, uint32(2147484284), uint32(NumberpixelspointingNp));
            end
        end
        function set.RefScanCycles(obj, RefScanCycles)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(206), obj.Session, uint32(2147484276), uint32(RefScanCycles));
            end
        end
        function set.RepeatNumberofCycles(obj, RepeatNumberofCycles)
            if ~isempty(obj.Session)
                obj.Status = NiFpga(uint32(206), obj.Session, uint32(2147484268), uint32(RepeatNumberofCycles));
            end
        end
        
        
    end
end
